# Claude Code プロジェクト設定

## セッション開始時の自動読み込み

このファイルは、Claude Codeセッション開始時に自動的に読み込まれます。

---

## プロジェクト概要

**プロジェクト名**: マーケティングナレッジチャットボット

**技術スタック**:
- Next.js 15 + TypeScript
- Tailwind CSS v4
- Supabase (PostgreSQL + pgvector)
- Google Gemini API
- Vercel (デプロイ)

**主要ディレクトリ**:
- `docs/` - すべてのドキュメント
- `src/` - Next.jsアプリケーション
- `scripts/` - データ同期スクリプト
- `supabase/` - DBマイグレーション

---

## 🚨 必須：セッション開始時のチェックリスト

### 1. 前回の記録を確認
- [ ] `docs/session-log.md` の最新セッションを確認
- [ ] Cipherの対話記録を確認（自動）
- [ ] 「次のステップ」を把握

### 2. 開発ガイドラインを確認
- [ ] `docs/development-guidelines.md` を再確認
- [ ] 絶対禁止事項を再確認

### 3. 今回のセッション目的を記録
- [ ] `docs/session-log.md` に新しいセッションを追加
- [ ] Cipherに今回の作業目的を記録

---

## 🔒 絶対禁止事項（必ず遵守）

### 要件理解関連
- ❌ ユーザーの明示的な指示の独自解釈・変更
- ❌ 曖昧な要件での実装開始（事前確認なし）
- ❌ 形式的なTodo完了（実質的な検証なし）
- ❌ 実装後の要件適合性チェック省略

### セキュリティ関連
- ❌ コード内の環境変数ベタ書き
- ❌ APIキーのハードコード
- ❌ `.env.local` のコミット

### コード変更関連
- ❌ 影響範囲分析なしでのコード変更
- ❌ ユーザー確認なしでの破壊的変更
- ❌ テストなしでのコード変更

---

## 📋 コード変更時の必須プロセス

### ステップ1: 影響範囲分析
```bash
# テンプレートをコピー
cp docs/impact-analysis/TEMPLATE.md \
   docs/impact-analysis/$(date +%Y-%m-%d)_変更内容.md

# 影響範囲を調査
grep -r "対象の関数名" src/
grep -r "import.*対象のファイル名" src/
```

### ステップ2: ユーザー確認
- 影響範囲をユーザーに提示
- 承認を得てから実装開始

### ステップ3: 実装
- TypeScript厳格モード遵守
- 環境変数は `process.env` から取得
- エラーハンドリング実装

### ステップ4: テスト
- 変更箇所のテスト
- 影響範囲すべてのテスト
- ESLint/TypeScriptエラーなし

### ステップ5: 記録
- Cipherに変更内容を記録
- `docs/session-log.md` を更新

---

## 🛠️ MCP サーバー活用

### Cipher（対話記録）
- セッション開始/終了時に記録
- 重要な意思決定を記録
- 問題と解決策を記録

### Serena（インテリジェントコーディング）
- 実装前に設計を確認
- ベストプラクティスを確認
- コードレビュー

詳細: `docs/mcp-usage-guide.md`

---

## 📚 主要ドキュメント（参照優先度順）

1. **開発ガイドライン** - `docs/development-guidelines.md`
   - 必須プロセス、禁止事項、コーディング標準

2. **環境変数管理** - `docs/environment-variables.md`
   - 環境変数の使い方、セキュリティ

3. **影響範囲分析テンプレート** - `docs/impact-analysis/TEMPLATE.md`
   - コード変更時に必ず作成

4. **MCP活用ガイド** - `docs/mcp-usage-guide.md`
   - Cipher/Serenaの使い方

5. **セッションログ** - `docs/session-log.md`
   - 過去の作業記録、クラッシュ復旧用

6. **要件定義書** - `docs/requirements.md`
   - プロジェクトの要件

7. **アーキテクチャ設計書** - `docs/architecture.md`
   - システム設計

8. **開発計画書** - `docs/development-plan.md`
   - スプリント計画、マイルストーン

---

## 🎯 現在の開発フェーズ

**Phase 1: MVP開発**

### 完了済み
- ✅ プロジェクトセットアップ
- ✅ 基本UI（ポータル、チャットページ骨組み）
- ✅ 開発ガイドライン整備
- ✅ MCP設定

### 次のステップ
- [ ] Supabaseプロジェクト作成
- [ ] ベクトルDB構築
- [ ] Google Sheets API設定
- [ ] データ取得スクリプト作成
- [ ] RAG機能実装
- [ ] チャットUI完成

---

## 💡 クラッシュからの復旧手順

### 1. このファイルを確認（自動読み込み）
### 2. セッションログを確認
```bash
# 最新のセッション記録を確認
tail -n 50 docs/session-log.md
```

### 3. Cipherの記録を確認（自動）
### 4. 「次のステップ」から作業再開
### 5. 途中状態のファイルを確認
```bash
# 最近変更されたファイル
find src -type f -mtime -1
```

---

## ⚠️ 重要な注意事項

### 環境変数
- **必ず** `process.env` から取得
- **絶対に** ハードコードしない
- ローカル: `.env.local`
- Vercel: Environment Variables

### Git運用
- `.env.local` は絶対にコミットしない
- コミットメッセージ規約に従う
  - `feat:` 新機能
  - `fix:` バグ修正
  - `docs:` ドキュメント
  - `refactor:` リファクタリング

### データ構造
- BtoB/BtoCは完全に分離
- スプレッドシートIDは環境変数で管理

---

## 🔄 定期的な確認事項

### 毎セッション
- [ ] ガイドライン再確認
- [ ] セッションログ記録
- [ ] Cipher記録

### コード変更時
- [ ] 影響範囲分析
- [ ] ユーザー確認
- [ ] テスト実施

### デプロイ前
- [ ] ESLint/TypeScriptエラーなし
- [ ] ビルド成功
- [ ] 環境変数設定確認

---

このファイルの内容を常に念頭に置いて開発を進めてください。
