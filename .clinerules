# プロジェクト固有ルール

## 自動適用ルール

### コーディング規約
- TypeScript厳格モード必須
- 環境変数は必ず `process.env` から取得
- APIキーをコードに含めない
- すべてのAPI Routeでエラーハンドリング実装

### ファイル命名規則
- コンポーネント: PascalCase (例: `ChatInterface.tsx`)
- ユーティリティ: kebab-case (例: `vector-search.ts`)
- API Route: kebab-case (例: `route.ts`)

### インポート順序
1. React/Next.js
2. サードパーティライブラリ
3. 内部モジュール (@/から始まる)
4. 型定義
5. スタイル

### コード変更前の必須確認
1. 影響範囲分析を実施
2. ユーザーに確認を取る
3. 既存テストが壊れないか確認

### 環境変数の扱い
- クライアントサイド: `NEXT_PUBLIC_` プレフィックス必須
- サーバーサイド: プレフィックスなし
- 未設定時はエラーをthrow

### エラーハンドリング標準
```typescript
try {
  // 処理
} catch (error) {
  console.error('エラー内容:', error);
  return Response.json(
    { error: 'エラーメッセージ' },
    { status: 500 }
  );
}
```

### 禁止事項
- `any` 型の使用（やむを得ない場合のみ `unknown` 使用）
- console.log の本番コードへの残留（開発時のみOK）
- マジックナンバー（定数化必須）
- 環境変数のハードコード

## Serena連携

このプロジェクトは Serena MCP サーバーと連携しています。
設計やベストプラクティスの確認時は積極的に活用してください。

## セッション開始時の自動タスク

1. `.clauderc` の内容を確認
2. `docs/session-log.md` の最新記録を確認
3. 開発ガイドラインを再確認
